[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

# project metadata

[project]
name = "hexdoc"
version = "1!0.1.0.dev0"
description = "Python web book docgen for Patchouli and Hex Casting."
authors = [
    { name="object-Object" },
    { name="Alwinfy" },
]
readme = "README.md"
license = { file = "LICENSE" }
keywords = [
    "hexdoc",
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Java",
    "Programming Language :: JavaScript",
    "Programming Language :: Kotlin",
    "Programming Language :: Python :: 3.11",
    "Topic :: Documentation",
    "Topic :: File Formats :: JSON",
    "Topic :: Games/Entertainment",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Localization",
    "Topic :: Text Processing :: Markup :: HTML",
    "Typing :: Typed",
]
requires-python = ">=3.11"
dependencies = [
    "importlib_resources~=6.0",
    "Jinja2~=3.1",
    "minecraft-render~=2.0a3",
    "more_itertools~=10.1",
    "ordered-set~=4.1",
    "packaging~=23.2",
    "pluggy~=1.3",
    "pydantic_settings~=2.0",
    "pydantic~=2.3,!=2.4.0",
    "pyjson5~=1.6",
    "requests~=2.31",
    "typer[all]~=0.9.0",
    "typing_extensions~=4.6",
]

[project.optional-dependencies]
test = [
    "pytest~=7.4",
    "pytest-dependency~=0.5.1",
    "syrupy~=4.6",
]
dev = [
    "hexdoc[test]",
    "black==23.7.0",
    "isort==5.12.0",
    "hatch",
    "build",
]

[project.urls]
Homepage = "https://object-object.github.io/HexMod/" # TODO: replace?
Source = "https://github.com/object-Object/hexdoc"

[tool.hatch.build]
artifacts = [
    "/src/hexdoc/_export/generated",
]

[tool.hatch.build.targets.sdist]
only-include = [
    "src/hexdoc",
]

[tool.hatch.build.targets.wheel]
packages = [
    "src/hexdoc",
]

[project.scripts]
hexdoc = "hexdoc.cli.main:app"

# hexdoc

[project.entry-points.hexdoc]
hexdoc = "hexdoc._hooks:HexdocPlugin"
minecraft = "hexdoc.minecraft._hooks:MinecraftPlugin"
patchouli = "hexdoc.patchouli._hooks:PatchouliPlugin"

# Pytest

[tool.pytest.ini_options]
addopts = ["--import-mode=importlib"]
markers = ["template"]
testpaths = ["test"]
filterwarnings = [
    'ignore:setDaemon\(\) is deprecated, set the daemon attribute instead:DeprecationWarning:javascript.events',
]

[tool.coverage.report]
include_namespace_packages = true

# formatting

[tool.isort]
profile = "black"
combine_as_imports = true
known_first_party = ["hexdoc"]

# type checking

[tool.pyright]
pythonVersion = "3.11"
pythonPlatform = "All"

exclude = [
    "venv",
    "**/.*",
    "**/node_modules",
    "**/__pycache__",
    "test/_submodules",
    "{{cookiecutter.output_directory}}",
]

typeCheckingMode = "basic"

enableExperimentalFeatures = true
strictDictionaryInference = true
strictListInference = true
strictSetInference = true

reportAssertAlwaysTrue = "error"
reportConstantRedefinition = "error"
reportDeprecated = "error"
reportDuplicateImport = "error"
reportFunctionMemberAccess = "error"
reportIncompatibleMethodOverride = "error"
reportIncompatibleVariableOverride = "error"
reportIncompleteStub = "error"
reportInconsistentConstructor = "error"
reportInvalidStringEscapeSequence = "error"
reportInvalidStubStatement = "error"
reportInvalidTypeVarUse = "error"
reportMatchNotExhaustive = "error"
reportMissingParameterType = "error"
reportMissingTypeStubs = "error"
reportOverlappingOverload = "error"
reportSelfClsParameterName = "error"
reportTypeCommentUsage = "error"
reportUnknownParameterType = "error"
reportUnnecessaryCast = "error"
reportUnnecessaryContains = "error"
reportUnsupportedDunderAll = "error"
reportUntypedBaseClass = "error"
reportUntypedClassDecorator = "error"
reportUntypedFunctionDecorator = "error"
reportUntypedNamedTuple = "error"
reportWildcardImportFromLibrary = "error"

reportMissingTypeArgument = "warning"
reportPrivateUsage = "warning"
reportUnknownArgumentType = "warning"
reportUnknownLambdaType = "warning"
reportUnknownMemberType = "warning"
reportUnknownVariableType = "warning"
reportUnnecessaryComparison = "warning"
reportUnnecessaryIsInstance = "warning"
reportUnusedClass = "warning"
reportUnusedExpression = "warning"
reportUnusedFunction = "warning"
reportUnusedImport = "warning"
reportUnusedVariable = "warning"
