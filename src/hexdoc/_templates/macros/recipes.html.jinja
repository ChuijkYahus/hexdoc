{% import "macros/textures.html.jinja" as texture_macros with context -%}
{% import "macros/formatting.html.jinja" as fmt with context -%}

{# show the names of all the recipe results in a list of recipes #}
{% macro generic(recipes, result_attribute, description, separator) -%}
  <blockquote class="crafting-info">
    {{ description }} {{
      recipes
      |map(attribute="result."~result_attribute)
      |map("hexdoc_wrap", "code")
      |join(separator)
    }}.
  </blockquote>
{%- endmacro %}

{# render a list of recipe ingredients #}
{% macro render_ingredients(ingredients, is_recursive=false) -%}
  {% for ingredient in ingredients %}
    {% if ingredient.type|string == "hexcasting:mod_conditional" %}
      {# recursion! what could possibly go wrong? (TODO: refactor out of hexdoc) #}
      {{ render_ingredients(ingredient.default, true) }}
      {{ render_ingredients(ingredient.if_loaded, true) }}
    {% else %}
      {{ texture_macros.render_item(ingredient.item, is_first=loop.first and not is_recursive) }}
    {% endif %}
  {% endfor %}
{%- endmacro %}

{# render a smelting interface for each recipe #}
{% macro smelting(recipes, type="_default") -%}
  <details class="details-collapsible smelting-details">
    {{ fmt.dropdown("hexdoc.recipe") }}
    <div class="smelting-recipes">
      {% for recipe in recipes %}
        <div>
          <h5>{{ recipe.result.name }}</h5>
          <div class="smelting-recipe recipe pixelated">
            <img
              alt="Smelting interface"
              src="{{ ('hexdoc:textures/gui/smelting'~type~'.png')|hexdoc_texture }}"
            >

            <div class="smelting-input recipe-item-slot">
              {{ render_ingredients(recipe.ingredient) }}
            </div>

            <div class="smelting-result recipe-item-slot">
              {{ texture_macros.render_item(recipe.result) }}
            </div>
            {{ extra_info("minecraft:lava_bucket", _("hexdoc.recipe.smelting.cooktime").format(("<span class='cooktime-highlight'>"~(recipe.cookingtime / 20)~"</span>")|safe)) }}
            {{ extra_info("minecraft:experience_bottle", _("hexdoc.recipe.smelting.exp").format(("<span class='exp-highlight'> "~recipe.experience~" </span>")|safe)) }}
          </div>
        </div>
      {% endfor %}
    </div>
  </details>
{%- endmacro %}

{% macro extra_info(item_id, text, classes="") -%}
  <div class="extra-info {{classes}}">
    {{ texture_macros.render_item(item_id|hexdoc_item)}}
    <span class="extra-info-desc">{{ text }}</span>
  </div>
{%- endmacro %}
