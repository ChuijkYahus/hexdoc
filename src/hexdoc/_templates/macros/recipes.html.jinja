{% import "macros/textures.html.jinja" as texture_macros with context -%}

{# show the names of all the recipe results in a list of recipes #}
{% macro generic(recipes, result_attribute, description, separator) -%}
  <blockquote class="crafting-info">
    {{ description }} {{
      recipes
      |map(attribute="result."~result_attribute)
      |map("hexdoc_wrap", "code")
      |join(separator)
    }}.
  </blockquote>
{%- endmacro %}

{# render a list of recipe ingredients #}
{% macro render_ingredients(ingredients, is_recursive=false) -%}
  {% for ingredient in ingredients %}
    {% if ingredient.type|string == "hexcasting:mod_conditional" %}
      {# recursion! what could possibly go wrong? (TODO: refactor out of hexdoc) #}
      {{ render_ingredients(ingredient.default, true) }}
      {{ render_ingredients(ingredient.if_loaded, true) }}
    {% else %}
      {{ texture_macros.render_item(ingredient.item, is_first=loop.first and not is_recursive) }}
    {% endif %}
  {% endfor %}
{%- endmacro %}

{# render a crafting table for each recipe #}
{% macro crafting_table(recipes) -%}
  <details class="details-collapsible crafting-table-details">
    <summary class="collapse-details">
      <span class="collapse-recipe-show">{{ _('hexdoc.recipe.show') }}</span>
      <span class="collapse-recipe-hide">{{ _('hexdoc.recipe.hide') }}</span>
    </summary>
    <div class="crafting-tables">
      {% for recipe in recipes %}
        <div>
          <h5>{{ recipe.result.item.name }}</h5>
          <div class="crafting-table">
            <img
              alt="Crafting table"
              src="{{ 'hexdoc:textures/gui/crafting_table.png'|hexdoc_texture }}"
            >

            <div class="crafting-table-grid">
              {% for cell_ingredients in recipe.ingredients %}
                {% if cell_ingredients is none %}
                  <div></div> {#- empty slot / air #}
                {% else %}
                  <div class="texture item-texture multi-textures cycle-textures">
                    {{ render_ingredients(cell_ingredients) }}
                  </div>
                {% endif %}
              {% endfor %}
            </div>

            <div class="crafting-table-result recipe-item-slot">
              {{ texture_macros.render_item(recipe.result.item, count=recipe.result.count) }}
            </div>
          </div>
        </div>
      {% endfor %}
    </div>
  </details>
{%- endmacro %}

{# render a smelting interface for each recipe #}
{% macro smelting(recipes, type="_default") -%}
  <details class="details-collapsible smelting-details">
    <summary class="collapse-details">
      <span class="collapse-recipe-show">{{ _('hexdoc.recipe.show') }}</span>
      <span class="collapse-recipe-hide">{{ _('hexdoc.recipe.hide') }}</span>
    </summary>
    <div class="smelting-recipes">
      {% for recipe in recipes %}
        <div>
          <h5>{{ recipe.result.name }}</h5>
          <div class="smelting-recipe recipe pixelated">
            <img
              alt="Smelting interface"
              src="{{ ('hexdoc:textures/gui/smelting'~type~'.png')|hexdoc_texture }}"
            >

            <div class="smelting-input recipe-item-slot">
              {{ render_ingredients(recipe.ingredient) }}
            </div>

            <div class="smelting-result recipe-item-slot">
              {{ texture_macros.render_item(recipe.result) }}
            </div>
            {{ extra_info("minecraft:lava_bucket", _("hexdoc.recipe.smelting.cooktime").format(("<span class='cooktime-highlight'>"~(recipe.cookingtime / 20)~"</span>")|safe)) }}
            {{ extra_info("minecraft:experience_bottle", _("hexdoc.recipe.smelting.exp").format(("<span class='exp-highlight'> "~recipe.experience~" </span>")|safe)) }}
          </div>
        </div>
      {% endfor %}
    </div>
  </details>
{%- endmacro %}

{% macro extra_info(item_id, text, classes="") -%}
  <div class="extra-info {{classes}}">
    {{ texture_macros.render_item(item_id|hexdoc_item)}}
    <span class="extra-info-desc">{{ text }}</span>
  </div>
{%- endmacro %}
